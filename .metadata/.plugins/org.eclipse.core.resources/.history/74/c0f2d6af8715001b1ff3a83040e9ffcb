package agents;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import jade.content.lang.Codec;
import jade.content.lang.sl.SLCodec;
import jade.content.onto.Ontology;
import jade.core.AID;
import jade.core.Agent;
import Ontology.MCPOntology;
import Ontology.Movie;

public class AgentNegotiator extends Agent {
	
	private List<Rating> ratings; //usar treemap
	private int propuestaActual = 0; // el indice
	
	protected Codec codec = new SLCodec();
	protected Ontology ontology = MCPOntology.getInstance();
	protected String name = "";

	protected void setup() {
			
		cutName();
	
		getContentManager().registerLanguage(codec);
		getContentManager().registerOntology(ontology);
		
		Movie movie1 = new Movie("Avatar        "); 					//Completar la movie con el resto de campos
		Movie movie2 = new Movie("Titanic       ");
		Movie movie3 = new Movie("The Avengers  ");
		Movie movie4 = new Movie("Jurassic World");
		Movie movie5 = new Movie("The Godfather ");
		Movie movie6 = new Movie("Shrek         ");
		Movie movie7 = new Movie("Harry potter  ");
		
		this.ratings = new ArrayList<>();
		ratings.add(new Rating(movie1,Math.random()));
		ratings.add(new Rating(movie2,Math.random()));
		ratings.add(new Rating(movie3,Math.random()));
		ratings.add(new Rating(movie4,Math.random()));
		ratings.add(new Rating(movie5,Math.random()));
		ratings.add(new Rating(movie6,Math.random()));
		ratings.add(new Rating(movie7,Math.random()));

		Collections.sort(ratings); 
		Collections.reverse(ratings); //ordeno de mayor a menor utilidad, el sort ordena de menor a mayor
		System.out.println("----------   " + getNombre() + " movies   -------------------");
		
		imprimitPeliculas();
		System.out.println();
		
	}
	
	private void imprimitPeliculas() {
		
		for(Rating rating: ratings) {
			System.out.println(rating.getPelicula().getName() + " = " + rating.getRating());
		}
		System.out.println();
	}
	public void aumentarPropuesta() {
		this.propuestaActual++;
	}
	public String getActualMovie() {
		return ratings.get(propuestaActual).getPelicula().getName();
	}
	public List<Rating> getRatings(String pelicula_propuesta){		
	List<Rating> retorno = new ArrayList<Rating>();
		retorno.addAll(ratings); //No rompo encapsulamiento
		return retorno;
		//return ratings;
	}
	public double getRating(String pelicula_propuesta){		
		for(Rating rating: ratings) {
			if(rating.getPelicula().getName().equals(pelicula_propuesta)) {
				return rating.getRating();
			}
		}
		return 0;
	}
	
	public Movie getPropuestaActual() {
		return ratings.get(propuestaActual).getPelicula();
	}
	
	public double getRatingPropuestaActual() {
		return ratings.get(propuestaActual).getRating();
	}
	public String getNombre() {
		return this.name;
	}
	private void cutName() {
	
		String filename = this.getAID().getName();     // full file name
		int iend = filename.indexOf("@"); 
		if (iend != -1) 
		{
			name= filename.substring(0 , iend); //this will give abc
		    
		}
	}
}
