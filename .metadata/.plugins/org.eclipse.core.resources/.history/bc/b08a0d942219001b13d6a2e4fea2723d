package fsm;
import Ontology.IsMyZeuthen; 

import agents.AgentNegotiator;

import jade.content.ContentElement;
import jade.content.lang.Codec.CodecException;
import jade.content.onto.OntologyException;
import jade.core.AID;
import jade.core.behaviours.Behaviour;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;

/*
   Tiene que obtener la propuesta del datastore 
*/
public class EvaluarPropuestaBehaviour extends Behaviour {
	
	private int event;
	public static String FINAL_MOVIE = "";
	@Override
	public void action() {
		ACLMessage prop = (ACLMessage)this.getDataStore().get(MCPBehaviour.PROPUESTA);
		/*
		MessageTemplate mt = MessageTemplate.and(
				MessageTemplate.MatchLanguage(codec.getName()),
				MessageTemplate.MatchOntology(ontology.getName()) );
		*/
		/*
		try {
			ContentElement ce = null;
			if (prop.getPerformative() == ACLMessage.INFORM) {
				ce = myAgent.getContentManager().extractContent(prop);
				IsMyZeuthen p = (IsMyZeuthen)ce;
	
			} 
	
		}
		catch (CodecException ce) {
			ce.printStackTrace();
		}
		catch (OntologyException oe) {
			oe.printStackTrace();
		}
		*/
		if (prop.getPerformative() == ACLMessage.CANCEL) {
			event = 2;
			return;
		}
		System.out.println(((AgentNegotiator)myAgent).getNombre() + " esta evaluando la propuesta");
		// EVALUA LA PROPUESTA 
		ACLMessage pelicula_propuesta = (ACLMessage)getDataStore().get(MCPBehaviour.PROPUESTA);
		//System.out.print("pelicula propuesa = " + pelicula_propuesta);
		double uPropActual = ((AgentNegotiator)myAgent).getRatingPropuestaActual();
		
		/*
		try {
			ACLMessage msg = new ACLMessage(ACLMessage.INFORM); 
			msg.addReceiver(new AID("Receptor",AID.ISLOCALNAME));
			msg.setLanguage(odec.getName());
			msg.setOntology(ontology.getName());
			System.out.println(cliente);
			getContentManager().fillContent(msg, new EsCliente(cliente));
			send(msg);
		}
		catch (CodecException ce) {
			ce.printStackTrace();
		}
		catch (OntologyException oe) {
			oe.printStackTrace();
		
		}
		*/
		double uPropRecibida = ((AgentNegotiator)myAgent).getRating(pelicula_propuesta.getContent());
		
		System.out.println("  uPropActual   =  " + uPropActual + " movie = " +((AgentNegotiator)myAgent).getActualMovie());
		System.out.println("  uPropRecibida =  " + uPropRecibida+ " movie = " + pelicula_propuesta.getContent());
		
		if (uPropActual <= uPropRecibida) { //U(PropuestaActual) <= U(PropuestaRecibida)
			
			ACLMessage accept = prop.createReply();
			accept.setPerformative(ACLMessage.ACCEPT_PROPOSAL);
			// SETEAR EL CONTENIDO
			//Para setear el ocntenido hay que usar la ontologia
			FINAL_MOVIE = pelicula_propuesta.getContent();
			System.out.println("La propuesta ha sido aceptada por "+ ((AgentNegotiator)myAgent).getNombre());
			myAgent.send(accept);
			event = 1;
		}
		else {
			System.out.println("La propuesta ha sido rechazada por" + ((AgentNegotiator)myAgent).getNombre());
			ACLMessage accept = prop.createReply();
			accept.setPerformative(ACLMessage.REJECT_PROPOSAL);
			// SETEAR EL CONTENIDO
			myAgent.send(accept);
			event = 0;
		}
			
	}

	@Override
	public boolean done() {
		return true; //Siempre va a devolver true porque no tiene que esperar ningun mensaje
	}
	
	@Override
	public int onEnd() {
		return event;
	}

}
